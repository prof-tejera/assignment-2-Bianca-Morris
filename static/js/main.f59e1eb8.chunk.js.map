{"version":3,"sources":["components/documentation/DocumentComponent.js","components/generic/Loading.js","utils/tokensAndTheme.js","utils/globalPropTypes.js","components/generic/Button.js","utils/helpers.js","components/generic/Input.js","components/generic/DisplayTime.js","components/generic/DisplayRounds.js","components/generic/Panel.js","components/generic/TimeInput.js","sfx/alarm.wav","sfx/restStart.wav","sfx/roundEnd.wav","context/AppProvider.js","components/generic/TimerControls.js","views/DocumentationView.js","utils/customReactHooks.js","components/timers/Stopwatch.js","components/timers/Countdown.js","components/timers/XY.js","components/timers/Tabata.js","views/TimersView.js","App.js","index.js"],"names":["Wrapper","styled","div","Container","Title","RenderComponent","Documentation","table","DocumentComponent","this","props","title","component","propDocs","map","doc","prop","description","type","defaultValue","React","Component","sizeMapping","small","medium","large","Dot","span","size","color","DotGroup","Loading","propSize","defaultProps","colorTokens","PropTypes","oneOf","bool","oneOfType","string","number","arrayOf","node","func","themeColors","btnPrimary","btnPrimaryHover","btnSecondary","btnSecondaryHover","btnDanger","btnDangerHover","btnDisabled","inputBackground","inputPlaceholder","textLight","textMedium","textDark","timerSwitchTitle","timerSwitchTitleActive","timerSelectorGradient1","timerSelectorGradient2","timerBgGradient1","timerBgGradient2","H1","ButtonSpacer","BaseButton","button","ButtonPrimary","ButtonSecondary","ButtonDanger","Button","children","variant","passProps","disabled","transformTimeUnitToDisplayString","timeUnit","Error","numString","toString","length","prepareTimeForJSDateConvert","time","newTime","i","push","HiddenLabel","label","StyledInput","input","Input","name","onChange","placeholder","value","min","max","Fragment","e","target","eventVal","adjustedValue","Math","Number","toFixed","Time","DisplayTime","hours","minutes","seconds","RoundsLabel","Rounds","DisplayRounds","currRound","totalRounds","isRest","ImageBackgroundPane","InnerPane","Panel","TimeInputLabel","TimeInputWrapper","TimeInput","hoursVal","minutesVal","secondsVal","AppContext","createContext","emptyTimer","AppProvider","useState","timer","setTimer","timerIdx","setTimerIdx","isTimerRunning","setTimerRunning","isIncrementing","setIsIncrementing","startTime","setStartTime","endTime","setEndTime","workTime","setWorkTime","restTime","setRestTime","numRounds","setNumRounds","setCurrRound","isWorkTime","setIsWorkTime","useSound","timerEndSound","playTimerEnd","roundEndSound","playRoundEnd","restStartSound","playRestStart","timerHasBeenStarted","timerComplete","handleStop","handleSetTimeInput","callback","inputHours","inputMinutes","inputSeconds","valInt","parseInt","handleStart","Provider","handleSetWorkTime","handleSetRestTime","handleSetStartTime","handleSetEndTime","handleReset","handleResume","tickUp","endHours","endMinutes","endSeconds","endOfMinute","tickDown","onCompleteCallback","handleChangeNumRounds","num","numInt","roundComplete","tabataRoundComplete","ButtonIconHolderRow","TimerControls","useContext","stopDisabled","startDisabled","resetDisabled","resumeDisabled","resetButton","onClick","icon","faSync","faStop","faFastForward","faPlay","inputValue","setInputValue","alert","console","log","useInterval","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","Stopwatch","noEndTimeInputted","endTimeEarlierThanStartTime","timeA","timeB","includeEquals","dateA","Date","join","dateB","isTimeABeforeTimeB","disableStart","disableInput","disableResume","Countdown","startHours","startMinutes","startSeconds","noStartTimeInputted","XY","disableInputs","LessMarginH1","Tabata","workHours","workMinutes","workSeconds","restHours","restMinutes","restSeconds","Timers","TimerSelector","TimerTitle","ActiveTimerTitle","App","timers","C","onTimerSwitch","idx","Nav","ul","NavItem","li","ViewCenterer","to","path","DocumentationView","TimersView","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f59e1eb8.chunk.js","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\n\nconst Wrapper = styled.div`\n  border: 1px solid #121212;\n  margin: 20px 0px;\n`;\n\nconst Container = styled.div`\n  padding: 20px;\n  display: flex;\n  justify-content: space-between;\n`;\n\nconst Title = styled.div`\n  display: flex;\n  justify-content: center;\n  padding-top: 20px;\n  font-size: 1.3rem;\n  font-family: BubblegumSans;\n`;\n\nconst RenderComponent = styled.div`\n  padding: 25px;\n  display: flex;\n  align-items: center;\n`;\n\nconst Documentation = styled.table``;\n\nclass DocumentComponent extends React.Component {\n  render() {\n    return (\n      <Wrapper>\n        <Title>{this.props.title}</Title>\n        <Container>\n          <RenderComponent>{this.props.component}</RenderComponent>\n          <Documentation>\n            <tbody>\n              <tr>\n                <th>Prop</th>\n                <th>Description</th>\n                <th>Type</th>\n                <th>Default value</th>\n              </tr>\n              {this.props.propDocs.map((doc) => {\n                return (\n                  <tr key={doc.prop}>\n                    <td>{doc.prop}</td>\n                    <td>{doc.description}</td>\n                    <td>{doc.type}</td>\n                    <td>\n                      <code>{doc.defaultValue}</code>\n                    </td>\n                  </tr>\n                );\n              })}\n            </tbody>\n          </Documentation>\n        </Container>\n      </Wrapper>\n    );\n  }\n}\n\nexport default DocumentComponent;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\n\nconst primaryColor = \"#ffa2bf\";\n\nconst sizeMapping = {\n  small: 10,\n  medium: 14,\n  large: 20,\n};\n\nconst Container = styled.div`\n  animation: spin 1.5s linear infinite;\n\n  @-moz-keyframes spin {\n    100% {\n      -moz-transform: rotate(360deg);\n    }\n  }\n  @-webkit-keyframes spin {\n    100% {\n      -webkit-transform: rotate(360deg);\n    }\n  }\n  @keyframes spin {\n    100% {\n      -webkit-transform: rotate(360deg);\n      transform: rotate(360deg);\n    }\n  }\n`;\n\nconst Dot = styled.span`\n  display: block;\n  width: ${(props) => props.size}px;\n  height: ${(props) => props.size}px;\n  background-color: ${(props) => props.color};\n  border-radius: 100%;\n  transform: scale(0.75);\n  transform-origin: 50% 50%;\n  opacity: 0.3;\n  animation: wobble 1s ease-in-out infinite;\n\n  @keyframes wobble {\n    0% {\n      border-radius: 25%;\n    }\n    100% {\n      border-radius: 100%;\n    }\n  }\n`;\n\nconst DotGroup = styled.div`\n  display: flex;\n`;\n\nconst Loading = (props) =>  {\n  const { color, size: propSize } = props;\n  const size = sizeMapping[propSize];\n\n  return (\n    <Container>\n      <DotGroup>\n        <Dot size={size} color={color} />\n        <Dot size={size} color={color} />\n      </DotGroup>\n      <DotGroup>\n        <Dot size={size} color={color} />\n        <Dot size={size} color={color} />\n      </DotGroup>\n    </Container>\n  );\n}\n\nLoading.propTypes = {\n  size: PropTypes.oneOf([\"small\", \"medium\", \"large\"]),\n  color: PropTypes.string,\n};\n\nLoading.defaultProps = {\n  size: \"medium\",\n  color: primaryColor,\n};\n\nexport default Loading;\n","import styled from \"styled-components\";\n\n/**\n * This page consists of a bunch of design tokens like colors and typography choices\n * that will be propagated across and reused throughout the app. Individual tokens may\n * be used in various places throughout the app, so this is a centralized place\n * for quickly editing and \"remixing\" them. If I had more typography, I'd build out\n * a separate list of typography tokens, and then use those to build out some re-usable\n * styled components for each major typography element. In that case I might also make\n * more use of props to pass more information into a typography component re: styling.\n */\n\n// Raw color values (HEX)\nexport const colorTokens = {\n    babyBlueLight: \"#61cbf5\", \n    babyBlue: \"#459Fd3\",\n    pinkLight: \"#E16BBD\",\n    pinkDarker: \"#B64995\",\n    redLight: \"#D34545\",\n    redDarker: \"#A42323\",\n    tealLight: \"#45D3AD\",\n    tealDarker: \"#419786\",\n    white: \"#FFFFFF\",\n    purpleLight: \"#617cb7\",\n    purpleMedium: \"#2b3254\",\n    lightGray: \"#DDDDDD\",\n};\n\n// Raw color values w/transparency (RGBA)\nexport const specialColorTokens = {\n    babyBlueLight: \"rgba(143,229,255,0.9)\",\n    purpleMedium: \"rgba(0,20,168,0.8)\"\n}\n\n// Values used across components for styling of specific areas & components\nexport const themeColors = {\n    // Buttons\n    btnPrimary: colorTokens.tealLight,\n    btnPrimaryHover: colorTokens.tealDarker,\n    btnSecondary: colorTokens.pinkLight,\n    btnSecondaryHover: colorTokens.pinkDarker,\n    btnDanger: colorTokens.redLight,\n    btnDangerHover: colorTokens.redDarker,\n    btnDisabled: colorTokens.lightGray,\n    // Inputs\n    inputBackground: colorTokens.white,\n    inputPlaceholder: colorTokens.babyBlue,\n    // Text\n    textLight: colorTokens.white,\n    textMedium: colorTokens.babyBlue,\n    textDark: colorTokens.purpleMedium,\n    // Timer Switcher\n    timerSwitchTitle: colorTokens.purpleMedium,\n    timerSwitchTitleActive: colorTokens.babyBlueLight,\n    timerSelectorGradient1: colorTokens.purpleLight,\n    timerSelectorGradient2: colorTokens.purpleMedium,\n    // Timer Background\n    timerBgGradient1: specialColorTokens.babyBlueLight,\n    timerBgGradient2: specialColorTokens.purpleMedium\n};\n\n// Shared Basic Typography Styles\nexport const H1 = styled.div`\n    font-family: Lobster;\n    font-size: 2rem;\n`;","import PropTypes from \"prop-types\";\n\n/**\n * A centralized collection of all of the prop types used across\n * the project. Will evolve as more features are added and things change;\n * these are rough estimates of the types needed.\n */\n\nexport const globalPropTypes = {\n    // Styling Props\n    variant: PropTypes.oneOf([\"primary\", \"secondary\", \"danger\"]),\n\n    // HTML Attributes\n    buttonType: PropTypes.oneOf([\"button\", \"submit\", \"reset\"]),\n    disabled: PropTypes.bool,\n    inputType: PropTypes.oneOf([\"text\", \"number\", \"submit\"]),\n    inputValue: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n    ]),\n    placeholder: PropTypes.string,\n    name: PropTypes.string,\n    min: PropTypes.string,\n    max: PropTypes.string,\n    \n    // React Props\n    children: PropTypes.oneOfType([\n        PropTypes.arrayOf(PropTypes.node),\n        PropTypes.node\n    ]),\n\n    // Event Handlers\n    onClick: PropTypes.func,\n    onChange: PropTypes.func,\n\n    // Timer-Specific Props\n    hours: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.oneOf([\"\"])\n    ]),\n    minutes: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.oneOf([\"\"])\n    ]),\n    seconds: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.oneOf([\"\"])\n    ]),\n    totalRounds: PropTypes.number,\n    currRound: PropTypes.number,\n    isRest: PropTypes.bool,\n\n};","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport { globalPropTypes } from \"../../utils/globalPropTypes\";\nimport { themeColors } from \"../../utils/tokensAndTheme\";\n\nexport const ButtonSpacer = styled.div`\n    width: 300px;\n    justify-content: space-evenly;\n    display: flex;\n`;\n\nconst BaseButton = styled.button`\n    color: ${themeColors.textLight};\n    border: none;\n    padding: 10px 20px;\n    font-size: 30px;\n    font-weight: 700;\n    font-family: SourceCodePro;\n    :disabled {\n        background-color: ${themeColors.btnDisabled};\n        cursor: not-allowed;\n        :hover {\n            background-color: ${themeColors.btnDisabled};\n        }\n    }\n`;\n\nconst ButtonPrimary = styled(BaseButton)`\n    background-color: ${themeColors.btnPrimary};\n    :hover {\n        background-color: ${themeColors.btnPrimaryHover};\n    }\n`;\n\nconst ButtonSecondary = styled(BaseButton)`\n    background-color: ${themeColors.btnSecondary};\n    :hover {\n        background-color: ${themeColors.btnSecondaryHover};\n    }\n`;\n\nconst ButtonDanger = styled(BaseButton)`\n    background-color: ${themeColors.btnDanger};\n    :hover {\n        background-color: ${themeColors.btnDangerHover};\n    }\n`;\n\nconst Button = (props) => {\n    const { children, variant, ...passProps } = props;\n\n    switch(variant) {\n        case \"secondary\":\n            return (\n                <ButtonSecondary {...passProps}>{children}</ButtonSecondary>\n            );\n        case \"danger\": \n            return (\n                <ButtonDanger {...passProps}>{children}</ButtonDanger>\n            );\n        case \"primary\":\n        default: \n            return (\n                <ButtonPrimary {...passProps}>{children}</ButtonPrimary>\n            );\n    }\n}\nButton.propTypes = {\n    variant: globalPropTypes.variant,\n    type: globalPropTypes.buttonType,\n    disabled: globalPropTypes.disabled,\n    children: globalPropTypes.children,\n    onClick: globalPropTypes.onClick.isRequired,\n}\nButton.defaultProps = {\n    type: \"button\",\n    disabled: false,\n    variant: \"primary\",\n    children: \"Click me\"\n}\n\nexport default Button;\n","/**\n * Only one helper function here currently; this will likely expand as I \n * work on making the timers functional.\n */\n\n/**\n * Does some validation and transforms to 2 digit display string; throws error on invalid\n * @param {Number} number\n * @param {String} timeUnit\n * @returns {String} 2-digit representation of the number\n */\nexport const transformTimeUnitToDisplayString = (number, timeUnit) =>  {\n    if ( // quick validity check\n        (number < 0) ||\n        (timeUnit === \"minutes\" && number > 60) ||\n        (timeUnit === \"seconds\" && number > 60)\n    ) {\n        throw new Error (\"invalid value for time segment\");\n    }\n    \n    let numString = number.toString();\n\n    if (numString.length < 2) {\n      numString = \"0\" + numString;\n    }\n    return numString;\n  }\n\nconst prepareTimeForJSDateConvert = (time) => {\n  const newTime = [];\n  for (let i = 0; i < time.length; i++) {\n    switch(i) {\n      case 0: \n        newTime.push(transformTimeUnitToDisplayString(time[i], \"hours\"));\n        break;\n      case 1:\n        newTime.push(transformTimeUnitToDisplayString(time[i], \"minutes\"));\n        break;\n      case 2:\n        newTime.push(transformTimeUnitToDisplayString(time[i], \"seconds\"));\n        break\n      default:\n        throw new Error(\"Cannot prepare date for convert; time may have greater length than expected.\");\n    }\n  }\n  return newTime;\n}\n\nexport const isTimeABeforeTimeB = (timeA, timeB, includeEquals) => {\n  // Convert the array times into a JS string that can be used in JS DateTime\n  const dateA = new Date(\"01/01/2021 \" + prepareTimeForJSDateConvert(timeA).join(\":\") + \" PM\");\n  const dateB = new Date(\"01/01/2021 \" + prepareTimeForJSDateConvert(timeB).join(\":\") + \" PM\");\n  \n  // Lower time since epoch (in milliseconds) = earlier time\n  if (includeEquals) {\n    return dateA <= dateB;\n  }\n  return dateA < dateB;\n}\n\n/** \n * DEPRECATED/UNUSED: These helpers are leftover from a previous attempt to use Javascript\n * DateTime for the timers (apparently more accurate to do it this way than simple interval)\n * -- due to complexity, this has been tabled. Keeping these here in case they become useful.\n*/\nexport const convertMillisecToSec = (ms) => {\n  return ms / 1000;\n}\n\nexport const convertSecondsToHours = (sec) => {\n  const hours = Math.floor(sec / (60 * 60));\n  const leftovers = sec - (hours * 60 * 60);\n  return [hours, leftovers];\n}\n\nexport const convertSecondsToMinutes = (sec) => {\n  const mins = Math.floor(sec / 60);\n  const leftovers = sec - (mins * 60);\n  return [mins, leftovers];\n}","import React from \"react\";\nimport styled from \"styled-components\";\nimport { themeColors } from \"../../utils/tokensAndTheme\";\nimport { globalPropTypes } from \"../../utils/globalPropTypes\";\nimport { transformTimeUnitToDisplayString } from \"../../utils/helpers\";\n\nconst HiddenLabel = styled.label`display:none;`;\n\nconst StyledInput = styled.input`\n    background-color: ${themeColors.inputBackground};\n    border: none;\n    width: 50px;\n    padding: 5px;\n    border-radius: 3px;\n    font-family: SourceCodePro;\n\n    ::placeholder {\n        color: ${themeColors.inputPlaceholder};\n        font-size: 20px;\n    }\n`;\n\nconst Input = (props) => {\n    const { type, name, onChange, disabled, placeholder, value, min, max } = props;\n\n    // Adds some additional validation for typed numbers\n    const validateChange = (e) => {\n        let { target: { value: eventVal, min, max } = {} } = e || {};\n        if (type === \"number\") { // ensure typed numerical values don't overflow min/max or include decimals\n            const adjustedValue = (Math.max(Number(min), Math.min(Number(max), Number(eventVal)))).toFixed(0);\n            e.target[\"value\"] = transformTimeUnitToDisplayString(adjustedValue);\n            onChange(e);\n        } else {\n            onChange(eventVal);\n        }\n    };\n\n    return (\n        <React.Fragment>\n            <HiddenLabel {...{ name }} ></HiddenLabel>\n            <StyledInput onChange={validateChange} {...{ name, type, disabled, placeholder, value, min, max }} />\n        </React.Fragment>\n    );\n}\nInput.propTypes = {\n    name: globalPropTypes.name.isRequired,\n    onChange: globalPropTypes.onChange.isRequired,\n    disabled: globalPropTypes.disabled,\n    placeholder: globalPropTypes.placeholder,\n    type: globalPropTypes.inputType,\n    value: globalPropTypes.inputValue,\n    min: globalPropTypes.min,\n    max: globalPropTypes.max,\n}\nInput.defaultProps = {\n    type: \"text\",\n    disabled: false,\n    value: \"\",\n    placeholder: \"Enter text here...\"\n}\n\nexport default Input;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { transformTimeUnitToDisplayString } from \"../../utils/helpers\";\nimport { globalPropTypes } from \"../../utils/globalPropTypes\";\n\nconst Time = styled.div`\n    font-size: 4em;\n    font-family: 'SourceCodePro';\n`;\n\nconst DisplayTime = (props) => {\n    const { hours, minutes, seconds } = props;\n    return (\n        <Time>\n            {transformTimeUnitToDisplayString(hours || 0, \"h\")}:\n            {transformTimeUnitToDisplayString(minutes || 0, \"m\")}:\n            {transformTimeUnitToDisplayString(seconds|| 0, \"s\")}\n        </Time>\n    );\n}\nDisplayTime.propTypes = {\n    hours: globalPropTypes.hours,\n    minutes: globalPropTypes.minutes,\n    seconds: globalPropTypes.seconds\n}\nDisplayTime.defaultProps = {\n    hours: 0,\n    minutes: 0,\n    seconds: 0,\n}\n\nexport default DisplayTime;","import React from \"react\";\nimport styled from \"styled-components\";\nimport { globalPropTypes } from \"../../utils/globalPropTypes\";\n\nexport const RoundsLabel = styled.div`\n  font-family: BubblegumSans;\n  padding-bottom: 15px;\n  padding-top: 10px;\n`;\n\nconst Rounds = styled.div`\n  font-family: BubblegumSans;\n`;\n\nconst DisplayRounds = (props) => {\n  const { currRound, totalRounds, isRest } = props;\n  return (\n    <Rounds>\n        (Round: {currRound}\n        {totalRounds > 0 && <span> of {totalRounds}</span>}\n        { isRest && <span> - Rest</span>})\n    </Rounds>\n  );\n}\nDisplayRounds.propTypes = {\n    totalRounds: globalPropTypes.totalRounds,\n    currRound: globalPropTypes.currRound,\n    isRest: globalPropTypes.isRest\n}\nDisplayRounds.defaultProps = {\n    totalRounds: 0,\n    currRound: 0,\n    isRest: false\n}\n\nexport default DisplayRounds;","import React from \"react\";\nimport styled from \"styled-components\";\nimport { themeColors } from \"./../../utils/tokensAndTheme\";\nimport { globalPropTypes } from \"../../utils/globalPropTypes\";\n\nconst ImageBackgroundPane = styled.div`\n    background: linear-gradient(120deg, ${themeColors.timerBgGradient1}, ${themeColors.timerBgGradient2}), url('/assignment-2-Bianca-Morris/maarten-van-den-heuvel-unsplash-sm.jpg');\n    height: 390px;\n    width: 550px;\n    border-radius: 0 20px 20px 0;\n    padding: 15px 20px 5px 20px;\n    background-position: center;\n    background-size: cover;\n`;\n\nconst InnerPane = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    box-sizing: border-box;\n    flex-shrink: 0;\n    border-radius: 20px;\n    border: 4px dotted #FFFFFF;\n    height: 380px;\n    width: 100%;\n    color: ${themeColors.textLight};\n`;\n\n\nconst Panel = (props) => {\n    const { children } = props;\n    return (\n        <ImageBackgroundPane>\n            <InnerPane>\n            { children }\n            </InnerPane>  \n        </ImageBackgroundPane>\n    );   \n}\nPanel.propTypes = {\n    children: globalPropTypes.children.isRequired,\n}\n\nexport default Panel;","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport { globalPropTypes } from \"../../utils/globalPropTypes\";\nimport Input from \"../generic/Input\";\n\nexport const TimeInputLabel = styled.div`\n  display: flex;\n  align-items: center;\n  font-family: BubblegumSans;\n  width: 100%;\n  justify-content: center;\n`;\n\nconst TimeInputWrapper = styled.div`\n    display: flex;\n    width: 200px;\n    justify-content: space-between;\n    margin: 10px 5px;\n`;\n\nconst TimeInput = (props) => {\n    const { disabled, hoursVal, minutesVal, secondsVal, onChange } = props;\n    return (\n        <TimeInputWrapper>\n            <Input placeholder=\"HH\" value={hoursVal} type=\"number\" name=\"hourInput\" min=\"0\" max=\"24\" {...{ disabled, onChange }} />\n            <Input placeholder=\"MM\" value={minutesVal} type=\"number\" name=\"minuteInput\" min=\"0\" max=\"59\" {...{ disabled, onChange }} />\n            <Input placeholder=\"SS\" value={secondsVal} type=\"number\" name=\"secondInput\" min=\"0\" max=\"59\" {...{ disabled, onChange }} />\n        </TimeInputWrapper>\n    )\n}\nTimeInput.propTypes = {\n    hoursVal: globalPropTypes.hours,\n    minutesVal: globalPropTypes.minutes,\n    secondsVal: globalPropTypes.seconds,\n    onChange: globalPropTypes.onChange.isRequired,\n    disabled: globalPropTypes.disabled\n}\nTimeInput.defaultProps = {\n    disabled: false,\n    hoursVal: 0,\n    minutesVal: 0,\n    secondsVal: 0\n}\n\nexport default TimeInput;\n","export default __webpack_public_path__ + \"static/media/alarm.0ac31e5c.wav\";","export default __webpack_public_path__ + \"static/media/restStart.54f09e8a.wav\";","export default __webpack_public_path__ + \"static/media/roundEnd.a673b70c.wav\";","import React, { useState } from 'react';\nimport useSound from 'use-sound';\n\nimport timerEndSound from '../sfx/alarm.wav';\nimport restStartSound from '../sfx/restStart.wav';\nimport roundEndSound from '../sfx/roundEnd.wav';\n\nexport const AppContext = React.createContext({});\n\nconst emptyTimer = [\"\", \"\", \"\"]; // [Hours, Minutes, Seconds]\n\nconst AppProvider = ({ children }) => {\n  // State shared across all timers\n  const [ timer, setTimer ] = useState(emptyTimer);\n  const [ timerIdx, setTimerIdx ] = useState(0); // Timer array specified in TimersView.js\n  const [ isTimerRunning, setTimerRunning ] = useState(false);\n  const [ isIncrementing, setIsIncrementing ] = useState(true); // if False, is decrementing\n\n  // States specific to certain timers\n  const [ startTime, setStartTime ] = useState(emptyTimer); // Used in Countdown & XY\n  const [ endTime, setEndTime ] = useState(emptyTimer); // Used in Stopwatch\n  const [ workTime, setWorkTime ] = useState(emptyTimer); // Used in Tabata\n  const [ restTime, setRestTime ] = useState(emptyTimer); // Used in Tabata\n  const [ numRounds, setNumRounds ] = useState(1); // Used in Tabata and XY\n  const [ currRound, setCurrRound ] = useState(1); // Used in Tabata and XY\n  const [ isWorkTime, setIsWorkTime ] = useState(true); // if False, is rest time\n\n  // Sound Hooks\n  const [playTimerEnd] = useSound(timerEndSound);\n  const [playRoundEnd] = useSound(roundEndSound);\n  const [playRestStart] = useSound(restStartSound);\n\n  const { 0: hours, 1: minutes, 2: seconds } = timer || [];\n\n  const timerHasBeenStarted = (!!hours || !!minutes || !!seconds) || (currRound !== 1) || !isWorkTime;\n\n  /* Counting up the seconds from 00:00:00 to endTime */\n  const tickUp = () => {\n    const { 0: endHours, 1: endMinutes, 2: endSeconds } = endTime || [];\n    if (\n      (seconds || 0) === (endSeconds || 0) && \n      (minutes || 0) === (endMinutes || 0) &&\n      (hours || 0) === (endHours || 0)\n    ) {\n      timerComplete();\n    } else {\n      const endOfMinute = seconds === 59;\n      const endOfHour = minutes === 59;\n      \n      if (endOfMinute && endOfHour) { // update hour\n        setTimer([(hours || 0) + 1, 0, 0]);\n      } else if (endOfMinute) { // update minute\n        setTimer([hours, (minutes || 0) + 1, 0]);\n      } else { // update second\n        setTimer([hours, minutes, (seconds || 0) + 1]);\n      }\n    }\n  }\n\n  /* Counting down the seconds from start time to 00:00:00 */\n  const tickDown = (onCompleteCallback) => {\n    if (!hours && !minutes && !seconds) {\n      onCompleteCallback();\n    } else if (!minutes && !seconds) {\n      setTimer([(hours - 1), 59, 59]);\n    } else if (!seconds) {\n      setTimer([hours, (minutes - 1), 59]);\n    } else {\n      setTimer([hours, minutes, (seconds - 1)]);\n    }\n  }\n\n  const timerComplete = () => {\n    handleStop();\n    playTimerEnd();\n    // alert('Timer complete!');\n  }\n\n  const roundComplete = () => {\n    if (currRound !== numRounds) {\n      playRoundEnd();\n      // start a new round\n      setTimer(startTime);\n      setCurrRound(currRound + 1);\n    } else {\n      timerComplete();\n    }\n  }\n\n  const tabataRoundComplete = () => {\n    if (!isWorkTime && (currRound === numRounds)) {\n      timerComplete();\n    } else {\n      if (isWorkTime) {\n        playRestStart();\n        setTimer(restTime); // update counter with rest time\n        setIsWorkTime(false); // convert to rest period\n      } else {\n        playRoundEnd();\n        setTimer(workTime); // update counter with work times\n        setIsWorkTime(true); // convert to work period\n        setCurrRound(currRound + 1); // start a new round\n      }\n    }\n  }\n\n  // Event Handlers\n  const handleSetStartTime = (e) => {\n    handleSetTimeInput(e, setStartTime, startTime);\n  }\n\n  const handleSetWorkTime = (e) => {\n    handleSetTimeInput(e, setWorkTime, workTime);\n  }\n\n  const handleSetRestTime = (e) => {\n    handleSetTimeInput(e, setRestTime, restTime);\n  }\n\n  const handleSetEndTime = (e) => {\n    handleSetTimeInput(e, setEndTime, endTime);\n  }\n\n  const handleSetTimeInput = (e, callback, time) => {\n    const { target: { value, name } = {} } = e || {};\n    const { 0: inputHours, 1: inputMinutes, 2: inputSeconds } = time || [];\n    const valInt = parseInt(value || 0);\n    switch(name) {\n      case \"hourInput\":\n        callback([valInt, inputMinutes, inputSeconds]);\n        break;\n      case \"minuteInput\":\n        callback([inputHours, valInt, inputSeconds]);\n        break;\n      case \"secondInput\":\n        callback([inputHours, inputMinutes, valInt]);\n        break;\n      default:\n        throw new Error(\"Attempting to handle time change for unrecognized input.\");\n    }   \n  }\n\n  const handleChangeNumRounds = (num) => {\n    const numInt = parseInt(num || 0);\n    setNumRounds(numInt);\n  }\n\n  const handleStop = (e) => {\n    setTimerRunning(false);\n  }\n\n  const handleStart = (e) => {\n    if (!isIncrementing) {\n      if (timerIdx !== 3) { // XY or Countdown\n        // start at start time\n        setTimer(startTime);\n      } else { // Tabata\n        if (isWorkTime) {\n          setTimer(workTime);\n        } else {\n          setTimer(restTime);\n        }\n      }\n    }\n    setTimerRunning(true);\n  }\n\n  const handleResume = (e) => {\n    if (!isIncrementing) {\n      setTimerRunning(true);\n    } else {\n      handleStart(e);\n    }\n  }\n\n  const handleReset = (e) => {\n    handleStop();\n    setTimer(emptyTimer);\n    setCurrRound(1);\n    setIsWorkTime(true);\n  }\n\n  return (\n    <AppContext.Provider\n      value={{\n        hours,\n        minutes,\n        seconds,\n        startTime,\n        endTime,\n        numRounds,\n        currRound,\n        isTimerRunning,\n        setStartTime,\n        setEndTime,\n        setTimer,\n        setNumRounds,\n        setCurrRound,\n        setTimerRunning,\n        handleSetWorkTime,\n        handleSetRestTime,\n        handleSetStartTime,\n        handleSetEndTime,\n        handleStop,\n        handleStart,\n        handleReset,\n        handleResume,\n        tickUp,\n        tickDown,\n        isIncrementing,\n        setIsIncrementing,\n        timerIdx,\n        setTimerIdx,\n        handleChangeNumRounds,\n        timerComplete,\n        roundComplete,\n        tabataRoundComplete,\n        isWorkTime,\n        workTime,\n        restTime,\n        timerHasBeenStarted,\n      }}\n    >\n      {children}\n    </AppContext.Provider>\n  );\n};\n\nexport default AppProvider;","import React, { useContext } from \"react\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faFastForward, faPlay, faStop, faSync } from '@fortawesome/free-solid-svg-icons';\n\nimport { AppContext } from \"../../context/AppProvider\";\nimport Button, { ButtonSpacer } from \"../generic/Button\";\nimport { globalPropTypes } from \"../../utils/globalPropTypes\";\nimport styled from \"styled-components\";\n\n\nconst ButtonIconHolderRow = styled.div`\n    display: flex;\n    justify-items: center;\n    align-items: center;\n    >span {\n        font-size: 18px;\n    }\n    >svg {\n        margin-right: 5px;\n    }\n`;\n\nconst TimerControls = (props) => {\n  const {\n    timerComplete,\n    isTimerRunning,\n    handleStop,\n    handleStart,\n    handleReset,\n    handleResume,\n    timerHasBeenStarted\n  } = useContext(AppContext);\n\n  const { \n    stopDisabled, startDisabled, resetDisabled, resumeDisabled\n  } = props;\n\n  const resetButton = (\n    <Button onClick={handleReset} variant=\"secondary\" disabled={resetDisabled}>\n        <ButtonIconHolderRow>\n            <FontAwesomeIcon icon={faSync} size=\"xs\"/>\n            <span>RESET</span>\n        </ButtonIconHolderRow>\n    </Button>);\n\n  if (!isTimerRunning) {\n    return (\n      <>\n        <ButtonSpacer>\n            { timerHasBeenStarted &&\n                <Button onClick={handleResume} disabled={resumeDisabled}>\n                    <ButtonIconHolderRow>\n                        <FontAwesomeIcon icon={faPlay} size=\"xs\"/>\n                        <span>RESUME</span>\n                    </ButtonIconHolderRow>\n                    \n                </Button>}\n            { !timerHasBeenStarted &&\n                <Button onClick={handleStart} disabled={startDisabled}>\n                    <ButtonIconHolderRow>\n                        <FontAwesomeIcon icon={faPlay} size=\"xs\"/>\n                        <span>START</span>\n                    </ButtonIconHolderRow>\n                </Button>} \n            { resetButton }\n        </ButtonSpacer>\n      </>\n    )\n  }\n  return (\n    <>\n      <ButtonSpacer>\n        { isTimerRunning &&\n            <Button onClick={handleStop} variant=\"danger\" disabled={stopDisabled}>\n                <ButtonIconHolderRow>\n                    <FontAwesomeIcon icon={faStop} size=\"xs\"/>\n                    <span>STOP</span>\n                </ButtonIconHolderRow>\n            </Button>} \n        { resetButton }\n        { isTimerRunning && \n            <Button onClick={() => { timerComplete(); handleReset()}}>\n                <ButtonIconHolderRow>\n                    <FontAwesomeIcon icon={faFastForward} size=\"xs\"/>\n                    <span>SKIP</span>\n                </ButtonIconHolderRow>\n            </Button> }\n      </ButtonSpacer>\n    </>\n  );\n}\nTimerControls.propTypes = {\n    startDisabled: globalPropTypes.disabled,\n    stopDisabled: globalPropTypes.disabled,\n    resetDisabled: globalPropTypes.disabled,\n    resumeDisabled: globalPropTypes.disabled\n}\nTimerControls.defaultProps = {\n    startDisabled: false,\n    stopDisabled: false,\n    resetDisabled: false,\n    resumeDisabled: false,\n}\n\nexport default TimerControls;\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport DocumentComponent from \"../components/documentation/DocumentComponent\";\n\nimport Loading from \"../components/generic/Loading\";\nimport Button from \"../components/generic/Button\";\nimport Input from \"../components/generic/Input\";\nimport DisplayTime from \"../components/generic/DisplayTime\";\nimport DisplayRounds from \"../components/generic/DisplayRounds\";\nimport Panel from \"../components/generic/Panel\";\nimport TimeInput from \"../components/generic/TimeInput\";\nimport TimerControls from \"../components/generic/TimerControls\";\n\nconst Container = styled.div`\n  display: flex;\n  justify-content: center;\n  width: 100%;\n`;\n\nconst Title = styled.div`\n  font-size: 2rem;\n  margin-top: 25px;\n  font-family: Lobster;\n`;\n\nconst Documentation = () => {\n\n  const [ inputValue, setInputValue ] = useState(\"Test\");\n  \n  return (\n    <Container>\n      <div>\n        <Title>Documentation</Title>\n        <DocumentComponent\n          title=\"Loading spinner \"\n          component={<Loading />}\n          propDocs={[\n            {\n              prop: \"size\",\n              description: \"Changes the size of the loading spinner\",\n              type: \"string\",\n              defaultValue: \"'medium'\",\n            },\n          ]}\n        />\n        <DocumentComponent\n          title=\"Button \"\n          component={<Button onClick={() => alert(\"You clicked the button!\")} />}\n          propDocs={[\n            {\n              prop: \"type\",\n              description: \"HTML attribute type of the button ('button' | 'submit' | 'reset')\",\n              type: \"string\",\n              defaultValue: \"'button'\",\n            },\n            {\n              prop: \"disabled\",\n              description: \"Is the button clickable?\",\n              type: \"boolean\",\n              defaultValue: \"false\",\n            },\n            {\n              prop: \"onClick\",\n              description: \"Function defining what to do when button is clicked\",\n              type: \"function\",\n              defaultValue: \"undefined\",\n            },\n            {\n              prop: \"variant\",\n              description: \"One of: ('primary' | 'secondary' | 'danger')\",\n              type: \"string\",\n              defaultValue: \"'primary'\",\n            },\n            {\n              prop: \"children\",\n              description: \"What to render inside of the button\",\n              type: \"node OR array of nodes\",\n              defaultValue: \"'Click Me'\",\n            },\n          ]}\n        />\n        <DocumentComponent\n          title=\"Input \"\n          component={<Input name=\"docInput\" onChange={setInputValue} value={inputValue} />}\n          propDocs={[\n            {\n              prop: \"type\",\n              description: \"HTML attribute type of the input ('text' | 'number' | 'submit')\",\n              type: \"string\",\n              defaultValue: \"'text'\",\n            },\n            {\n              prop: \"placeholder\",\n              description: \"Placeholder text for the input\",\n              type: \"string\",\n              defaultValue: \"'Enter text here...'\"\n            },\n            {\n              prop: \"disabled\",\n              description: \"Is is possible to enter text?\",\n              type: \"boolean\",\n              defaultValue: \"false\",\n            },\n            {\n              prop: \"onChange\",\n              description: \"Function defining what to do when text is updated\",\n              type: \"function\",\n              defaultValue: \"undefined\",\n            },\n            {\n              prop: \"name\",\n              description: \"An identifier for this input\",\n              type: \"string\",\n              defaultValue: \"undefined\",\n            },\n            {\n              prop: \"value\",\n              description: \"Current value of the input (should match 'type' prop)\",\n              type: \"string or number\",\n              defaultValue: \"''\",\n            },\n            {\n              prop: \"min\",\n              description: \"If type is number, this will be used as the minimum the field accepts\",\n              type: \"string\",\n              defaultValue: \"undefined\",\n            },\n            {\n              prop: \"max\",\n              description: \"If type is number, this will be used as the maximum the field accepts\",\n              type: \"string\",\n              defaultValue: \"undefined\"\n            }\n          ]}\n        />\n        <DocumentComponent\n          title=\"Display Time \"\n          component={<DisplayTime hours={0} minutes={0} seconds={0} />}\n          propDocs={[\n            {\n              prop: \"hours\",\n              description: \"A numeric representation of hours; max 2 digits\",\n              type: \"number\",\n              defaultValue: \"0\",\n            },\n            {\n              prop: \"minutes\",\n              description: \"A numeric representation of minutes; max 2 digits\",\n              type: \"number\",\n              defaultValue: \"0\",\n            },\n            {\n              prop: \"seconds\",\n              description: \"A numeric representation of seconds; max 2 digits\",\n              type: \"number\",\n              defaultValue: \"0\",\n            },\n          ]}\n        />\n        <DocumentComponent\n          title=\"Display Rounds \"\n          component={<DisplayRounds />}\n          propDocs={[\n            {        \n              prop: \"currRound\",\n              description: \"The current round\",\n              type: \"number\",\n              defaultValue: \"0\",\n            },\n            {\n              prop: \"totalRounds\",\n              description: \"The total number of rounds selected\",\n              type: \"number\",\n              defaultValue: \"0\"\n            },\n            {\n              prop: \"isRest\",\n              description: \"Is this a rest interval?\",\n              type: \"boolean\",\n              defaultValue: \"false\",\n            },\n          ]}\n        />\n        <DocumentComponent\n          title=\"Panel \"\n          component={<Panel children={<div/>}/>}\n          propDocs={[\n            {        \n              prop: \"children\",\n              description: \"React children to render inside of the panel\",\n              type: \"node or array of nodes\",\n              defaultValue: \"undefined\",\n            },\n          ]}\n        />\n        <DocumentComponent\n          title=\"TimeInput \"\n          component={<TimeInput onChange={() => console.log(\"timeinput\")}/>}\n          propDocs={[\n            {\n              prop: \"hoursVal\",\n              description: \"A numeric representation of hours; max 2 digits\",\n              type: \"number\",\n              defaultValue: \"0\",\n            },\n            {\n              prop: \"minutesVal\",\n              description: \"A numeric representation of minutes; max 2 digits\",\n              type: \"number\",\n              defaultValue: \"0\",\n            },\n            {\n              prop: \"secondsVal\",\n              description: \"A numeric representation of seconds; max 2 digits\",\n              type: \"number\",\n              defaultValue: \"0\",\n            },\n            {\n              prop: \"disabled\",\n              description: \"Should the inputs be disabled or enabled?\",\n              type: \"boolean\",\n              defaultValue: \"false\"\n            },\n            {\n              prop: \"onChange\",\n              description: \"A single function to handle updates for hours, minutes and seconds\",\n              type: \"function\",\n              defaultValue: \"undefined\"\n            }\n          ]}\n        />\n        <DocumentComponent\n          title=\"TimerControls \"\n          component={<TimerControls startDisabled={true} stopDisabled={true} resetDisabled={true} />}\n          propDocs={[\n            {\n              prop: \"startDisabled\",\n              description: \"Should start button be disabled?\",\n              type: \"boolean\",\n              defaultValue: \"false\",\n            },\n            {\n              prop: \"stopDisabled\",\n              description: \"Should stop button be disabled?\",\n              type: \"boolean\",\n              defaultValue: \"false\"\n            },\n            {\n              prop: \"resetDisabled\",\n              description: \"Should reset button be disabled?\",\n              type: \"boolean\",\n              defaultValue: \"false\"\n            },\n            {\n              prop: \"context\",\n              description: \"This component needs to use global AppContext for event handlers and conditional display.\",\n              type: \"object\",\n              defaultValue: \"undefined\"\n            }\n          ]}\n        />\n      </div>\n    </Container>\n  );\n}\n\nexport default Documentation;\n","import { useEffect, useRef } from \"react\";\n\n/**\n * Borrowed from an example on Overreacted.io\n * https://overreacted.io/making-setinterval-declarative-with-react-hooks/\n */\nexport function useInterval(callback, delay) {\n    const savedCallback = useRef();\n  \n    // Remember the latest function.\n    useEffect(() => {\n        savedCallback.current = callback;\n    }, [callback]);\n  \n    // Set up the interval.\n    useEffect(() => {\n        function tick() {\n            savedCallback.current();\n        }\n        if (delay !== null) {\n            let id = setInterval(tick, delay);\n            return () => clearInterval(id);\n        }\n    }, [delay]);\n}","import React, { useContext, useEffect } from \"react\";\n\nimport { AppContext } from \"../../context/AppProvider\";\nimport { useInterval } from \"../../utils/customReactHooks\";\nimport { isTimeABeforeTimeB } from \"../../utils/helpers\";\n\nimport { H1 } from \"../../utils/tokensAndTheme\";\nimport DisplayTime from \"../generic/DisplayTime\";\nimport TimeInput, { TimeInputLabel } from \"../generic/TimeInput\";\nimport TimerControls from \"../generic/TimerControls\";\n\nconst Stopwatch = (props) =>  {\n  const {\n    hours,\n    minutes,\n    seconds,\n    isTimerRunning,\n    tickUp,\n    setIsIncrementing,\n    endTime,\n    handleSetEndTime,\n    timerHasBeenStarted\n  } = useContext(AppContext);\n\n  const { 0: endHours, 1: endMinutes, 2: endSeconds } = endTime || [];\n  \n  useInterval(() => {\n    tickUp();\n  }, isTimerRunning ? 1000 : null);\n\n  // On mount, ensure timer is set to increment/tick up from 00:00:00\n  useEffect(() => { setIsIncrementing(true);}, [setIsIncrementing]);\n\n  const noEndTimeInputted = !endHours && !endMinutes && !endSeconds;\n  const endTimeEarlierThanStartTime = isTimeABeforeTimeB(endTime, [hours, minutes, seconds], true);\n  const disableStart = noEndTimeInputted || endTimeEarlierThanStartTime;\n  const disableInput = isTimerRunning || timerHasBeenStarted;\n  const disableResume = !!(hours || 0 === endHours || 0) && !!(minutes || 0 === endMinutes || 0 ) && !!(seconds || 0 === endSeconds || 0);\n\n  return (\n    <React.Fragment>\n      <H1>Stopwatch</H1>\n      <DisplayTime {...{ hours, minutes, seconds }} />\n      <TimeInputLabel>\n        End Time:\n        <TimeInput disabled={disableInput} hoursVal={endHours} minutesVal={endMinutes} secondsVal={endSeconds} onChange={handleSetEndTime} />\n      </TimeInputLabel>\n      <TimerControls startDisabled={disableStart} resumeDisabled={disableResume} />\n    </React.Fragment>\n  );\n}\n\nexport default Stopwatch;\n","import React, { useContext, useEffect } from \"react\";\n\nimport { AppContext } from \"../../context/AppProvider\";\nimport { useInterval } from \"../../utils/customReactHooks\";\n// import { isTimeABeforeTimeB } from \"../../utils/helpers\";\n\nimport { H1 } from \"../../utils/tokensAndTheme\";\nimport DisplayTime from \"../generic/DisplayTime\";\nimport TimeInput, { TimeInputLabel } from \"../generic/TimeInput\";\nimport TimerControls from \"../generic/TimerControls\";\n\n\nconst Countdown = (props) => {\n  const {\n    hours,\n    minutes,\n    seconds,\n    isTimerRunning,\n    startTime,\n    handleSetStartTime,\n    tickDown,\n    setIsIncrementing,\n    timerComplete,\n    timerHasBeenStarted\n  } = useContext(AppContext);\n\n  const { 0: startHours, 1: startMinutes, 2: startSeconds } = startTime || [];\n\n  useInterval(() => {\n    tickDown(timerComplete);\n  }, isTimerRunning ? 1000 : null);\n\n  // On mount, ensure timer is set to decrement/tick down from startTime\n  useEffect(() => { setIsIncrementing(false); }, [setIsIncrementing]);\n\n  const noStartTimeInputted = !startHours && !startMinutes && !startSeconds;\n  // const endTimeEarlierThanStartTime = isTimeABeforeTimeB(startTime, [hours, minutes, seconds], true);\n  // const disableStart = noStartTimeInputted || endTimeEarlierThanStartTime;\n\n  return (\n    <React.Fragment>\n      <H1>Countdown</H1>\n      <DisplayTime {...{ hours, minutes, seconds }} />\n      <TimeInputLabel>\n        Start Time:\n        <TimeInput disabled={isTimerRunning || timerHasBeenStarted} hoursVal={startHours} minutesVal={startMinutes} secondsVal={startSeconds} onChange={handleSetStartTime} />\n      </TimeInputLabel>\n      <TimerControls startDisabled={noStartTimeInputted}/>\n    </React.Fragment>\n  );\n}\n\nexport default Countdown;\n","import React, { useContext, useEffect } from \"react\";\n\nimport { AppContext } from \"../../context/AppProvider\";\nimport { useInterval } from \"../../utils/customReactHooks\";\n\nimport { H1 } from \"../../utils/tokensAndTheme\";\nimport DisplayTime from \"../generic/DisplayTime\";\nimport DisplayRounds, { RoundsLabel } from \"../generic/DisplayRounds\";\nimport TimeInput, { TimeInputLabel } from \"../generic/TimeInput\";\nimport Input from \"../generic/Input\";\nimport TimerControls from \"../generic/TimerControls\";\n\n\nconst XY = (props) => {\n  const {\n    hours,\n    minutes,\n    seconds,\n    isTimerRunning,\n    startTime,\n    handleSetStartTime,\n    tickDown,\n    setIsIncrementing,\n    numRounds,\n    handleChangeNumRounds,\n    currRound,\n    roundComplete,\n    timerHasBeenStarted\n  } = useContext(AppContext);\n\n  const { 0: startHours, 1: startMinutes, 2: startSeconds } = startTime || [];\n\n  useInterval(() => {\n    tickDown(roundComplete);\n  }, isTimerRunning ? 1000 : null);\n\n  // On mount, ensure timer is set to decrement/tick down from startTime\n  useEffect(() => { setIsIncrementing(false); }, [setIsIncrementing]);\n\n  const noStartTimeInputted = !startHours && !startMinutes && !startSeconds;\n  const invalidRounds = currRound > numRounds;\n  const disableStart = noStartTimeInputted || invalidRounds;\n  const disableResume = numRounds === currRound && (!hours && !minutes && !seconds);\n  const disableInputs = timerHasBeenStarted || isTimerRunning;\n\n  return (\n    <React.Fragment>\n      <H1>XY</H1>\n      <DisplayRounds {...{ currRound }} totalRounds={numRounds}/>\n      <DisplayTime {...{ hours, minutes, seconds }} />\n      <TimeInputLabel>\n        Start Time:\n        <TimeInput disabled={disableInputs} hoursVal={startHours} minutesVal={startMinutes} secondsVal={startSeconds} onChange={handleSetStartTime}/>\n      </TimeInputLabel>\n      <RoundsLabel>\n        # of Rounds:\n        <Input name=\"numRoundsXY\" disabled={disableInputs} value={numRounds} placeholder=\"1\" onChange={handleChangeNumRounds}/>\n      </RoundsLabel>\n      <TimerControls startDisabled={disableStart} resumeDisabled={disableResume} />\n    </React.Fragment>\n  );\n}\n\nexport default XY;\n","import React, { useContext, useEffect } from \"react\";\nimport styled from \"styled-components\";\n\nimport { AppContext } from \"../../context/AppProvider\";\nimport { useInterval } from \"../../utils/customReactHooks\";\n\nimport { H1 } from \"../../utils/tokensAndTheme\";\nimport DisplayTime from \"../generic/DisplayTime\";\nimport DisplayRounds, { RoundsLabel } from \"../generic/DisplayRounds\";\nimport TimeInput, { TimeInputLabel } from \"../generic/TimeInput\";\nimport Input from \"../generic/Input\";\nimport TimerControls from \"../generic/TimerControls\";\n\nconst LessMarginH1 = styled(H1)`\n  margin: 5px;\n`;\n\nconst Tabata = (props) => {\n  const {\n    hours,\n    minutes,\n    seconds,\n    isTimerRunning,\n    isWorkTime,\n    workTime,\n    handleSetWorkTime,\n    restTime,\n    handleSetRestTime,\n    tickDown,\n    setIsIncrementing,\n    numRounds,\n    handleChangeNumRounds,\n    currRound,\n    tabataRoundComplete,\n    timerHasBeenStarted\n  } = useContext(AppContext);\n\n  const { 0: workHours, 1: workMinutes, 2: workSeconds } = workTime || [];\n  const { 0: restHours, 1: restMinutes, 2: restSeconds } = restTime || [];\n\n  useInterval(() => {\n    tickDown(tabataRoundComplete);\n  }, isTimerRunning ? 1000 : null);\n\n  // On mount, ensure timer is set to decrement/tick down from startTime\n  useEffect(() => { setIsIncrementing(false); }, [setIsIncrementing]);\n\n  const noWorkTimeInputted = !workHours && !workMinutes && !workSeconds;\n  const noRestTimeInputted = !restHours && !restMinutes && !restSeconds;\n  const invalidRounds = currRound > numRounds;\n  const startDisabled = (noWorkTimeInputted && noRestTimeInputted) || invalidRounds; // allow to start as long as work or rest is present\n  const disableInputs = timerHasBeenStarted || isTimerRunning;\n  const disableResume = numRounds === currRound && (!hours && !minutes && !seconds);\n\n  return (\n    <React.Fragment>\n      <LessMarginH1>Tabata</LessMarginH1>\n      <DisplayRounds {...{ currRound }} totalRounds={numRounds} isRest={!isWorkTime}/>\n      <DisplayTime {...{ hours, minutes, seconds }}/>\n      <TimeInputLabel>\n        Work Time:\n        <TimeInput disabled={disableInputs} onChange={handleSetWorkTime} hoursVal={workHours} minutesVal={workMinutes} secondsVal={workSeconds} />\n      </TimeInputLabel>\n      <TimeInputLabel>\n        Rest Time:\n        <TimeInput disabled={disableInputs} onChange={handleSetRestTime} hoursVal={restHours} minutesVal={restMinutes} secondsVal={restSeconds}/>\n      </TimeInputLabel>\n      <RoundsLabel>\n        # of Rounds:\n        <Input disabled={disableInputs} name=\"numRoundsTabata\" value={numRounds} placeholder=\"1\" onChange={handleChangeNumRounds}/>\n      </RoundsLabel>\n      <TimerControls {...{ startDisabled }}  resumeDisabled={disableResume}/>\n    </React.Fragment>\n  );\n}\n\nexport default Tabata;\n","import React, { useContext } from \"react\";\nimport styled from \"styled-components\";\n\nimport Panel from \"../components/generic/Panel\";\nimport Stopwatch from \"../components/timers/Stopwatch\";\nimport Countdown from \"../components/timers/Countdown\";\nimport XY from \"../components/timers/XY\";\nimport Tabata from \"../components/timers/Tabata\";\nimport { AppContext } from \"../context/AppProvider\";\n\nimport { themeColors } from \"../utils/tokensAndTheme\";\n\nconst Timers = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst TimerSelector = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  width: 250px;\n  height: 350px;\n  justify-content: center;\n  background: linear-gradient(143deg, ${themeColors.timerSelectorGradient1} 0%, ${themeColors.timerSelectorGradient2} 100%);\n  overflow: visible;\n  border-radius: 20px 0 0 20px;\n  padding: 30px;\n`;\n\nconst TimerTitle = styled.div`\n  background-color: ${themeColors.timerSwitchTitle};\n  color: ${themeColors.textMedium};\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  padding: 20px 0;\n  margin-top: 10px;\n  margin-bottom: 10px;\n  text-transform: uppercase;\n  font-weight: 700;\n  cursor: pointer;\n  font-family: SourceCodePro;\n`;\n\nconst ActiveTimerTitle = styled(TimerTitle)`\n  background-color: ${themeColors.timerSwitchTitleActive};\n  color: ${themeColors.textLight};\n`;\n\nfunction App() {\n  const { timerIdx, setTimerIdx, handleReset } = useContext(AppContext);\n\n  const timers = [\n    { title: \"Stopwatch\", C: <Stopwatch /> },\n    { title: \"Countdown\", C: <Countdown /> },\n    { title: \"XY\", C: <XY /> },\n    { title: \"Tabata\", C: <Tabata /> },\n  ];\n\n  const onTimerSwitch = (e, idx) => {\n    handleReset(); // ensure any timers currently running are stopped & timer is reset\n    setTimerIdx(idx);\n  };\n\n  return (\n    <Timers>\n      <TimerSelector >\n      {timers.map((timer, idx) => {\n        if (timerIdx === idx) {\n          return <ActiveTimerTitle key={timer.title} onClick={(e) => onTimerSwitch(e, idx)}>{timer.title}</ActiveTimerTitle>;\n        }\n        return <TimerTitle key={timer.title} onClick={(e) => onTimerSwitch(e, idx)}>{timer.title}</TimerTitle>;\n      })}\n      </TimerSelector>\n      <Panel>\n        {timers[timerIdx].C}\n      </Panel>\n    </Timers>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport styled from \"styled-components\";\n\nimport DocumentationView from \"./views/DocumentationView\";\nimport TimersView from \"./views/TimersView\";\nimport AppProvider from \"./context/AppProvider\";\n\nconst Container = styled.div`\n  background: #f0f6fb;\n  height: 100vh;\n  overflow: auto;\n`;\n\nconst Nav = styled.ul`\n  list-style-type: none;\n  margin: 0;\n  padding: 0;\n  background-color: #333333;\n\n`;\n\nconst NavItem = styled.li`\n  display: inline-block;\n  padding: 10px;\n  text-decoration: none;\n  \n  >a {\n    color: #ffffff;\n    :hover {\n      color: #dedede;\n    }\n  }\n`;\n\nconst ViewCenterer = styled.div`\n  display: flex;\n  height: calc(100% - 40px);\n  justify-content: center;\n`;\n\nfunction App() {\n  return (\n    <Container>\n      <Router>\n        <nav>\n          <Nav>\n            <NavItem>\n              <Link to=\"/\">Timers</Link>\n            </NavItem>\n            <NavItem>\n              <Link to=\"/docs\">Documentation</Link>\n            </NavItem>\n          </Nav>\n        </nav>\n        <ViewCenterer>\n          <Switch>\n            <Route path=\"/docs\">\n              <DocumentationView />\n            </Route>\n            <Route path=\"/\">\n              <AppProvider>\n                <TimersView />\n              </AppProvider>\n            </Route>\n          </Switch>\n        </ViewCenterer>\n      </Router>\n    </Container>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}